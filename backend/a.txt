npm install express mongoose bcryptjs jsonwebtoken cors helmet morgan express-rate-limit multer nodemailer pdfkit
npm install react-router-dom axios react-hook-form recharts jwt-decode
npm install jwt-decode@latest
=====================
1. Auth Module (5-6 APIs)
These handle registration, login, etc. Start here to get a token.

Request 1: Register User (Admin)

Folder: Auth
Method & URL: POST {{baseUrl}}/auth/register
Headers: None
Body:
json{
  "username": "admin1",
  "password": "password123",
  "role": "admin",
  "email": "admin@example.com"
}

Test Steps: Send request. Expect 200 OK with { "token": "eyJ..." }. Copy the token to environment variable token.


Request 2: Register User (Accountant)

Folder: Auth
Method & URL: POST {{baseUrl}}/auth/register
Headers: None
Body:
json{
  "username": "accountant1",
  "password": "password123",
  "role": "accountant",
  "email": "accountant@example.com"
}

Test Steps: Send. Expect 200 with token. (Repeat for "student" role if needed.)


Request 3: Login

Folder: Auth
Method & URL: POST {{baseUrl}}/auth/login
Headers: None
Body:
json{
  "username": "admin1",
  "password": "password123"
}

Test Steps: Send. Expect 200 with new token. Update token variable. Use this for authenticated requests.


Request 4: Get Profile

Folder: Auth
Method & URL: GET {{baseUrl}}/auth/profile
Headers: Authorization: Bearer {{token}}
Body: None
Test Steps: Send (as admin). Expect 200 with user details like { "username": "admin1", "role": "admin" }.


Request 5: Update Profile

Folder: Auth
Method & URL: PUT {{baseUrl}}/auth/profile/update
Headers: Authorization: Bearer {{token}}
Body:
json{
  "email": "newadmin@example.com"
}

Test Steps: Send. Expect 200 with updated user object.


Request 6: Assign Role (Admin Only)

Folder: Auth
Method & URL: POST {{baseUrl}}/auth/role
Headers: Authorization: Bearer {{token}} (use admin token)
Body:
json{
  "userId": "paste_user_id_here",  // Get from /auth/profile or DB
  "role": "accountant"
}

Test Steps: Send. Expect 200 with updated user. (Test with invalid userId for 404.)


Request 7: Logout

Folder: Auth
Method & URL: POST {{baseUrl}}/auth/logout
Headers: Authorization: Bearer {{token}}
Body: None
Test Steps: Send. Expect 200 with { "message": "Logged out" }. (Token remains valid until expiry, but logs audit.)




2. Student Module (5-6 APIs)
Use admin or accountant token. Create students for later tests.

Request 1: Add Student

Folder: Students
Method & URL: POST {{baseUrl}}/students
Headers: Authorization: Bearer {{token}} (admin/accountant)
Body:
json{
  "name": "John Doe",
  "rollNo": "ROLL001",
  "course": "BA",
  "year": 1
}

Test Steps: Send. Expect 201 with student object including _id. Note the _id for later (e.g., as studentId).


Request 2: List All Students

Folder: Students
Method & URL: GET {{baseUrl}}/students
Headers: Authorization: Bearer {{token}} (admin/accountant)
Body: None
Test Steps: Send. Expect 200 with array of students.


Request 3: Get Student Details

Folder: Students
Method & URL: GET {{baseUrl}}/students/{{studentId}} (set studentId in env or replace)
Headers: Authorization: Bearer {{token}}
Body: None
Test Steps: Send. Expect 200 with student details. (Test as student role for own ID.)


Request 4: Update Student

Folder: Students
Method & URL: PUT {{baseUrl}}/students/{{studentId}}
Headers: Authorization: Bearer {{token}} (admin/accountant)
Body:
json{
  "name": "John Updated"
}

Test Steps: Send. Expect 200 with updated student.


Request 5: Delete Student

Folder: Students
Method & URL: DELETE {{baseUrl}}/students/{{studentId}}
Headers: Authorization: Bearer {{token}} (admin only)
Body: None
Test Steps: Send. Expect 200 with { "message": "Student deleted" }. (Verify with GET for 404.)


Request 6: Get Student's Batches

Folder: Students
Method & URL: GET {{baseUrl}}/students/{{studentId}}/batches
Headers: Authorization: Bearer {{token}}
Body: None
Test Steps: Send. Expect 200 with array of batches (empty initially).




3. Batch Module (4-5 APIs)
Create batches and associate with students.

Request 1: Create Batch

Folder: Batches
Method & URL: POST {{baseUrl}}/batches
Headers: Authorization: Bearer {{token}} (admin)
Body:
json{
  "name": "BA 1st Year",
  "course": "BA",
  "year": 1
}

Test Steps: Send. Expect 201 with batch object. Note _id as batchId.


Request 2: List Batches

Folder: Batches
Method & URL: GET {{baseUrl}}/batches
Headers: Authorization: Bearer {{token}}
Body: None
Test Steps: Send. Expect 200 with array of batches.


Request 3: Get Batch Details

Folder: Batches
Method & URL: GET {{baseUrl}}/batches/{{batchId}}
Headers: Authorization: Bearer {{token}}
Body: None
Test Steps: Send. Expect 200 with batch details.


Request 4: Update Batch

Folder: Batches
Method & URL: PUT {{baseUrl}}/batches/{{batchId}}
Headers: Authorization: Bearer {{token}} (admin)
Body:
json{
  "name": "BA 1st Year Updated"
}

Test Steps: Send. Expect 200 with updated batch.


Request 5: Delete Batch

Folder: Batches
Method & URL: DELETE {{baseUrl}}/batches/{{batchId}}
Headers: Authorization: Bearer {{token}} (admin)
Body: None
Test Steps: Send. Expect 200 with message. (Note: Associate students to batches via update student API if testing population.)




4. Fee Module (6-8 APIs)
Use after creating students. Test installments by multiple deposits.

Request 1: Deposit Fee

Folder: Fees
Method & URL: POST {{baseUrl}}/fees/deposit
Headers: Authorization: Bearer {{token}} (accountant)
Body:
json{
  "studentId": "{{studentId}}",
  "amount": 5000,
  "totalDue": 10000
}

Test Steps: Send. Expect 200 with fee object and receiptUrl (PDF path). Check server for generated PDF in /receipts.


Request 2: Get Student's Fee History

Folder: Fees
Method & URL: GET {{baseUrl}}/fees/student/{{studentId}}
Headers: Authorization: Bearer {{token}}
Body: None
Test Steps: Send. Expect 200 with array of fees.


Request 3: Get Fees by Batch

Folder: Fees
Method & URL: GET {{baseUrl}}/fees/batch/{{batchId}}
Headers: Authorization: Bearer {{token}} (admin/accountant)
Body: None
Test Steps: Send (after associating student to batch). Expect 200 with fees array.


Request 4: Get Receipt

Folder: Fees
Method & URL: GET {{baseUrl}}/fees/receipt/{{feeId}} (get feeId from deposit response)
Headers: Authorization: Bearer {{token}}
Body: None
Test Steps: Send. Expect 200 with { "receiptId": "REC-..." }. (In prod, enhance to download PDF.)


Request 5: Update Fee Record

Folder: Fees
Method & URL: PUT {{baseUrl}}/fees/{{feeId}}
Headers: Authorization: Bearer {{token}} (admin)
Body:
json{
  "amount": 6000
}

Test Steps: Send. Expect 200 with updated fee.


Request 6: Get Fee Reports (with Filters)

Folder: Fees
Method & URL: GET {{baseUrl}}/fees/reports?startDate=2023-01-01&endDate=2023-12-31
Headers: Authorization: Bearer {{token}} (admin/accountant)
Body: None
Test Steps: Send. Expect 200 with filtered fees array. Test without query params for all.




5. Document Module (4-5 APIs)
Test after creating students. (Note: fileUrl is placeholder; add multer for real uploads.)

Request 1: Upload Document

Folder: Documents
Method & URL: POST {{baseUrl}}/documents
Headers: Authorization: Bearer {{token}} (admin/accountant)
Body:
json{
  "student": "{{studentId}}",
  "type": "NOC",
  "fileUrl": "http://example.com/noc.pdf"
}

Test Steps: Send. Expect 201 with document object. Note _id as docId.


Request 2: Get Student's Documents

Folder: Documents
Method & URL: GET {{baseUrl}}/documents/student/{{studentId}}
Headers: Authorization: Bearer {{token}}
Body: None
Test Steps: Send. Expect 200 with documents array.


Request 3: Update Document

Folder: Documents
Method & URL: PUT {{baseUrl}}/documents/{{docId}}
Headers: Authorization: Bearer {{token}} (admin/accountant)
Body:
json{
  "fileUrl": "http://example.com/updated-noc.pdf"
}

Test Steps: Send. Expect 200 with updated document.


Request 4: Delete Document

Folder: Documents
Method & URL: DELETE {{baseUrl}}/documents/{{docId}}
Headers: Authorization: Bearer {{token}} (admin)
Body: None
Test Steps: Send. Expect 200 with message.




6. Reports Module (3-4 APIs)
Test after creating data (fees, batches).

Request 1: Fee Collection Analytics

Folder: Reports
Method & URL: GET {{baseUrl}}/reports/fees
Headers: Authorization: Bearer {{token}} (admin/accountant)
Body: None
Test Steps: Send. Expect 200 with aggregated data (e.g., monthly totals).


Request 2: Fraud Check (Transaction Audit)

Folder: Reports
Method & URL: GET {{baseUrl}}/reports/fraud-check
Headers: Authorization: Bearer {{token}} (admin)
Body: None
Test Steps: Send. Expect 200 with log array (fee-related actions).


Request 3: Batch-wise Summary

Folder: Reports
Method & URL: GET {{baseUrl}}/reports/batches
Headers: Authorization: Bearer {{token}} (admin/accountant)
Body: None
Test Steps: Send. Expect 200 with summary array (batch names, student counts).




Additional Testing Tips

Role-Based Testing: Switch tokens (login as different roles) to test authorization (e.g., student can't add students â†’ 403).
Validation Errors: Send invalid bodies (e.g., missing fields) to test 400 errors.
Fraud Prevention: After deposits, check /reports/fraud-check for logs.
Receipts: Verify PDFs are generated and auto (no manual edit).
Edge Cases: Test with non-existent IDs (404), unauthorized (401/403), rate limiting (429 if >100 req/15min).
Automation in Postman: Add tests/scripts in Postman (e.g., pm.test("Status 200", () => { pm.response.to.have.status(200); });). Chain requests using variables.
Export Collection: In Postman, export the collection as JSON for sharing.
Total Tests: This covers all ~28-34 APIs. Run sequentially to build data.